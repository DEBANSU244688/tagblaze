//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "ticket_tag")]
/// Represents the association between a ticket and a tag in the system.
///
/// Each `Model` instance links a ticket (`ticket_id`) to a tag (`tag_id`),
/// with a unique identifier (`id`) as the primary key.
///
/// This struct is typically used for managing many-to-many relationships
/// between tickets and tags.
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ticket_id: i32,
    pub tag_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::tag::Entity",
        from = "Column::TagId",
        to = "super::tag::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Tag,
    #[sea_orm(
        belongs_to = "super::ticket::Entity",
        from = "Column::TicketId",
        to = "super::ticket::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Ticket,
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Tag.def()
    }
}

impl Related<super::ticket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ticket.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
